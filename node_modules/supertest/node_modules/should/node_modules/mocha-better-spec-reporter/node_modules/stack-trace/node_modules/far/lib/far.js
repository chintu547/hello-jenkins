var path = require('path');
var Finder = require('./finder');
var oop = require('oop');
var str = require('./str');
var spawn = require('child_process').spawn;

module.exports = Far;

function Far() {
  oop.mixin(this, Finder);

  this._start = null;

  this._verbose = 0;

  this._index = 0;
  this._errors = 0;
  this._lastStatus = null;

  this._interval = 500;
  this._intervalTimer = null;
};

Far.create = function() {
  var far = new Far();
  return far;
};

Far.createFromArgv = function(argv) {
  var far = this.create();
  far.applyArgv(argv);
  return far;
};

Far.prototype.applyArgv = function(argv) {
  argv = argv.slice(2);

  var arg;
  while (arg = argv.shift()) {
    if (arg === '-e') {
      this.exclude(argv.shift());
      continue;
    }

    if (arg === '-i') {
      this.include(argv.shift());
      continue;
    }

    if (arg.match(/^-v+/)) {
      this.verbose(arg.length - 1);
      continue;
    }

    this.add(arg);
  }
};

Far.prototype.verbose = function(increase) {
  this._verbose += increase || 1;
};

Far.prototype.execute = function() {
  this._start = new Date;
  this.findSync();

  this._intervalTimer = setInterval(this._printStatus.bind(this), this._interval);
  this._executeNext();
};

Far.prototype._executeNext = function() {
  var path = this._files[this._index];
  if (!path) {
    this._end();
    return;
  }

  this._execute(path);
};

Far.prototype._execute = function(file) {
  this._printStatus(file);

  var node = spawn(process.execPath, [file]);
  var output = '';

  node.stdout.setEncoding('utf8');
  node.stderr.setEncoding('utf8');

  function onOutput(chunk) {
    if (this._verbose > 1) {
      process.stderr.write(chunk);
    } else {
      output += chunk;
    }
  }

  node.stdout.on('data', onOutput.bind(this));
  node.stderr.on('data', onOutput.bind(this));

  node.on('exit', function(code) {
    this._index++;
    this._printTestResult(file, code, output);
    this._executeNext();
  }.bind(this));
};

Far.prototype._clearStatus = function() {
  if (!this._lastStatus |